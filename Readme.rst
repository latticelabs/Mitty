Mitty is a collection of programs to generate simulated datasets to benchmark aligners and variant callers.

Mitty generates simulated data by starting from a reference genome and then adding controlled mutations to it to create
one or more variant "sample" genomes. Mitty can then generate reads from the chromosomes of the mutated genome(s). 

At each stage of this process we know the origins of the data and so we know

- The correct alignment of each read
- The correct variants in the "sample" that these reads came from.

**The data generated by Mitty can, therefore, be used to test the correctness of aligners and variant callers under
different conditions and data set characteristics.**

Simulated data generation::


    fasta-----------------|-------------------------------------------|
  (reference)             |                                           |
                    |-----------|      |-----------|             |-----------|
    variant ------->| genome    |----->| simulated |------------>| read      |
    models          | simulator |      | genomes   |             | simulator |-----> simulated
                    |           |      |-----------|       |---->|           |       fastq
    population ---->|-----------|        |                 |     |-----------|
    model                 |              |                read         |
                          |              |                model        |
                      parameters         |--> simulated             parameters
                                                VCF


Algorithm benchmarking::

                    |---------|                |----------|     |--------|     |----------|
    simulated       | Aligner |                | BAM      |     | BAM    |     | Analysis |
    fastq     ----->| being   |-----> BAM ---->| analyzer |---->| stats  |---->| reports  |
                    | tested  |        |       |----------|     |--------|     |----------|
                    |---------|        |
                                       |
                                       |    |----------|
                                       |    | Variant  |             |----------|    |----------|
                                       |    | caller   |             | VCF      |    | Analysis |
                                       |--->| being    |---> VCF --->| analyzer |--->| reports  |
                                            | tested   |             |----------|    |----------|
                                            |----------|                 |
                                                             simulated --|
                                                             VCF

Installation
============

Virtual environments
--------------------
While not required, it is strongly recommended that you use `virtual environments`_ for your Python code. I find
`virtualenvwrapper`_ awesome for managing Python virtual environments::

    sudo pip install virtualenvwrapper
    source /usr/local/bin/virtualenvwrapper.sh  # You may want to add this to your login script

(You should study the details of installing this tool from their excellent documentation)

Then create a new environment for your Mitty install::
    
    mkvirtualenv mitty-test
    
This will prepare a new environment and activate it. When you are done you can do::

    deactivate

And when you want to come back do::

    workon mitty-test


.. _virtual environments: http://docs.python-guide.org/en/latest/dev/virtualenvs/
.. _virtualenvwrapper: https://virtualenvwrapper.readthedocs.org/en/latest/


Mitty installation
------------------
On Linux, you may first need to pull some dependencies (as needed) such as ::

    sudo apt-get install python-pip git python-numpy python-scipy python-dev cython zlib1g-dev libhdf5-serial-dev python-matplotlib

You will also need setuptools 11.0.0 or more recent ::

    pip install -U setuptools

Installing from the public repo
+++++++++++++++++++++++++++++++
You can install Mitty by::

    pip install git+https://github.com/latticelabs/Mitty.git

If you want a specific branch or tag you can do things like

    pip install git+https://github.com/latticelabs/Mitty.git@develop


Installing from the internal SBG repos
++++++++++++++++++++++++++++++++++++++
If you are internal to SBG and have access to the VPN, the SBG dev pi server contains wheels for most of the packages,
including the latest builds of Mitty. You can use the devpi server (cuts down on compilation time in many cases) by
adding the following lines to your ~/.pip/pip.conf file (you may need to create the file first)::

    [global]
    extra-index-url = https://pip.sbgenomics.com/packages

To get the stable release version of Mitty try ::

    pip install -U mitty

For the dev team, you will want the `develop` branch of Mitty ::

    pip install -U mitty --pre

To get the code directly from gitlab (e.g. because you want a specific commit/tag) use something like ::
    
    pip install -U git+https://gitlab.sbgenomics.com:9443/graphgenome/mitty.git@develop#egg=mitty

On mac os x this will pull all packages as needed, including numpy. 

Run the tests
-------------
::

    pip install nose  # If needed
    nosetests mitty -v


Developing
==========

To develop on Mitty, simply clone the repository, and from the project root run ::

    pip install -e .

or, for the optional, plotting dependencies

::

  pip install -e .[mplot]

To compile the documentation
----------------------------
You will need ``sphinx`` and the ``programoutput`` extension for sphinx::

    pip install sphinx
    pip install sphinxcontrib-programoutput
    pip install sphinxcontrib-napoleon

Go into ``/docs`` and type ``make html`` or ``make latexpdf`` etc. (use ``make`` to get a list of options)



Creating wheels
...............
::

    pip install wheel  # If needed
    pip wheel .


Please see the documentation for a comprehensive, step-by-step tutorial.